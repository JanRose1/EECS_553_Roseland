# -*- coding: utf-8 -*-
"""DataProcessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Mz1HWQ6Q9Io-IcbrJJiYbFi_1whCd1Uf
"""

import numpy as np
import pandas as pd
from hrvanalysis import remove_outliers, remove_ectopic_beats, interpolate_nan_values
from hrvanalysis import get_time_domain_features
import math
from hrvanalysis import plot_timeseries
import matplotlib.pyplot as plt
import os
import datetime
from datetime import datetime, timedelta

#Modify User to get different file
dfs = pd.read_csv('./RR.csv')

Values = list(dfs['ibi_s'])
Values = [i * 1000 for i in Values]
Values = np.sort(Values)

q1 = np.percentile(Values, 25)
q3 = np.percentile(Values, 75)
iqr = q3 - q1

RR = list(dfs['ibi_s'])
RR = [i * 1000 for i in RR]
dfs['ibi_s'] = remove_outliers(rr_intervals = RR,low_rri = q1-1.5*iqr,high_rri = q3+1.5*iqr,verbose = False)

dfs['ibi_s'] = interpolate_nan_values(rr_intervals=dfs['ibi_s'],interpolation_method="linear")
dfs['ibi_s'] = remove_ectopic_beats(rr_intervals=dfs['ibi_s'], method="malik")
interpolated_nn_intervals = interpolate_nan_values(rr_intervals= dfs['ibi_s'])

dfs = dfs.dropna()

nns = list(dfs['ibi_s'])

Differencing_nn_intervals = []
current = nns[0]
for i in range(1,len(nns)):
    Differencing_nn_intervals.append(np.log(nns[i]) - np.log(current))
    current = nns[i]
Differencing_nn_intervals.append(0)

dfs['ibi_s'] = Differencing_nn_intervals

#If we drop duplicates we lose a lot of info
#dfs = dfs.drop_duplicates(subset = 'time')

dfs.drop("Unnamed: 0", axis=1, inplace=True)

#Checking other data: Actigraph (make specific to User)
Filepath = "./Actigraph.csv"
df = pd.read_csv(Filepath)

#0,1,2,3 Will be sitting standing and lying respectively
Column = []
IncVal = [0,1,2,3] #Off,Standing,Sitting,Lying Respectively
for i in range(len(df)):
   BoolList = [df['Inclinometer Off'][i],df['Inclinometer Standing'][i],
                df["Inclinometer Sitting"][i],df["Inclinometer Lying"][i]]
   Column.append(IncVal[(BoolList.index(1))])

df['Inclinometer'] = Column

df.drop("Unnamed: 0", axis=1, inplace=True)

final = dfs.merge(df,on=['time','day'],how='left')

final = final.drop(["Vector Magnitude","Inclinometer Off",'Inclinometer Standing',
                    'Inclinometer Sitting','Inclinometer Lying'],axis = 1)

#Checking other data Activity (make specific to User)
Filepath = "./Activity.csv"
df = pd.read_csv(Filepath)

def calculateTime(start,end):
    start_time = datetime.strptime(start, "%H:%M")
    end_time = datetime.strptime(end, "%H:%M")
    time_list = []
    current_time = start_time

    while current_time <= end_time:
        time_list.append(current_time.strftime('%H:%M:%S'))
        current_time += timedelta(seconds=1)

    return time_list

#Version that adds values between start and end
testdf = pd.DataFrame(columns = ['time','day','Activity'] )

for i in range(0,len(df)):
    if i > 0:
        if df['Activity'][i-1] == 0: #At this point reasonable to assume sleeping
            Activity = 1
            Day = df['Day'][i]
            timelist = calculateTime(end,df['Start'][i])
            for time in timelist:
                new = [time,Day,Activity]
                new = pd.DataFrame(columns=testdf.columns, data=[new])
                testdf = pd.concat([testdf, new], axis=0)

        elif df['Activity'][i] != 0:#Otherwise fill in with zero
            Activity = 0
            Day = df['Day'][i]
            timelist = calculateTime(end,df['Start'][i])
            for time in timelist:
                new = [time,Day,Activity]
                new = pd.DataFrame(columns=testdf.columns, data=[new])
                testdf = pd.concat([testdf, new], axis=0)
        else:
            continue

    #Add values between start and end
    Activity = df['Activity'][i]
    Day = df['Day'][i]
    timelist = calculateTime(df['Start'][i],df['End'][i])
    for time in timelist:
        new = [time,Day,Activity]
        new = pd.DataFrame(columns=testdf.columns, data=[new])
        testdf = pd.concat([testdf, new], axis=0)

    end = df['End'][i]

#Original version leaves gaps (Don't Run)
testdf = pd.DataFrame(columns = ['time','day','Activity'] )
for i in range(0,len(df)):
    if df['End'].isnull().iloc[i] or df['Start'].isnull().iloc[i]:
        continue
    Activity = df['Activity'][i]
    Day = df['Day'][i]
    timelist = calculateTime(df['Start'][i],df['End'][i])
    for time in timelist:
        new = [time,Day,Activity]
        new = pd.DataFrame(columns=testdf.columns, data=[new])
        testdf = pd.concat([testdf, new], axis=0)

final = final.merge(testdf,on=['time','day'],how='left')

final = final.dropna()

new_order = ['time', 'day','ibi_s','HR'] + [col for col in final.columns if col not in ['time', 'day','ibi_s','HR']]
final = final[new_order]

final

final.to_csv("/content/Patient1Values.csv")